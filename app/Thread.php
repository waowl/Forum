<?php

namespace App;

use App\Traits\RecordActivity;
use Illuminate\Database\Eloquent\Model;

class Thread extends Model
{
    use RecordActivity;

    protected $appends = ['isSubscribedTo'];
    protected $guarded = [];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($thread) {
            $thread->replies->each->delete();
        });

    }


    public function getIsSubscribedToAttribute()
    {
        return $this->subscriptions()
            ->where(['user_id' => auth()->id()])
            ->exists();
    }

    public function path()
    {
        return "/thread/{$this->channel->slug}/{$this->id}";
    }

    public function replies()
    {
        return $this->hasMany(Reply::class)
            ->withCount('favorites');
    }

    public function creator()
    {
        return $this->belongsTo(User::class, 'user_id');
    }

    public function channel()
    {
        return $this->belongsTo(Channel::class);
    }

    public function addReply(array $reply)
    {
        return $this->replies()->create($reply);
    }

    public function scopeFilter($query, $filters)
    {
        return $filters->apply($query);
    }

    public  function subscribe($userId = null)
    {
       return $this->subscriptions()->create([
            'user_id' => $userId?: auth()->id()
        ]);
    }
    public  function unsubscribe($userId = null)
    {
        return $this->subscriptions()->where(['user_id' => $userId ?: auth()->id()])
            ->delete();
    }
    public function subscriptions()
    {
        return $this->hasMany(Subscription::class);
    }

}
